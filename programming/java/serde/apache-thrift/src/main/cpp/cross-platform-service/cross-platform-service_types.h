/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cross-platform-service_TYPES_H
#define cross-platform-service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace com { namespace baeldung { namespace thrift { namespace impl {

class InvalidOperationException;

class CrossPlatformResource;

typedef struct _InvalidOperationException__isset {
  _InvalidOperationException__isset() : code(false), description(false) {}
  bool code :1;
  bool description :1;
} _InvalidOperationException__isset;

class InvalidOperationException : public ::apache::thrift::TException {
 public:

  InvalidOperationException(const InvalidOperationException&);
  InvalidOperationException& operator=(const InvalidOperationException&);
  InvalidOperationException() : code(0), description() {
  }

  virtual ~InvalidOperationException() noexcept;
  int32_t code;
  std::string description;

  _InvalidOperationException__isset __isset;

  void __set_code(const int32_t val);

  void __set_description(const std::string& val);

  bool operator == (const InvalidOperationException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const InvalidOperationException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperationException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(InvalidOperationException &a, InvalidOperationException &b);

std::ostream& operator<<(std::ostream& out, const InvalidOperationException& obj);

typedef struct _CrossPlatformResource__isset {
  _CrossPlatformResource__isset() : id(false), name(false), salutation(false) {}
  bool id :1;
  bool name :1;
  bool salutation :1;
} _CrossPlatformResource__isset;

class CrossPlatformResource : public virtual ::apache::thrift::TBase {
 public:

  CrossPlatformResource(const CrossPlatformResource&);
  CrossPlatformResource& operator=(const CrossPlatformResource&);
  CrossPlatformResource() : id(0), name(), salutation() {
  }

  virtual ~CrossPlatformResource() noexcept;
  int32_t id;
  std::string name;
  std::string salutation;

  _CrossPlatformResource__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_salutation(const std::string& val);

  bool operator == (const CrossPlatformResource & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (__isset.salutation != rhs.__isset.salutation)
      return false;
    else if (__isset.salutation && !(salutation == rhs.salutation))
      return false;
    return true;
  }
  bool operator != (const CrossPlatformResource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformResource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CrossPlatformResource &a, CrossPlatformResource &b);

std::ostream& operator<<(std::ostream& out, const CrossPlatformResource& obj);

}}}} // namespace

#endif
