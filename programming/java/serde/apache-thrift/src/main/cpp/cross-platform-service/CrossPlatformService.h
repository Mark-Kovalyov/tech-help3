/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CrossPlatformService_H
#define CrossPlatformService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "cross-platform-service_types.h"

namespace com { namespace baeldung { namespace thrift { namespace impl {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CrossPlatformServiceIf {
 public:
  virtual ~CrossPlatformServiceIf() {}
  virtual void get(CrossPlatformResource& _return, const int32_t id) = 0;
  virtual void save(const CrossPlatformResource& resource) = 0;
  virtual void getList(std::vector<CrossPlatformResource> & _return) = 0;
  virtual bool ping() = 0;
};

class CrossPlatformServiceIfFactory {
 public:
  typedef CrossPlatformServiceIf Handler;

  virtual ~CrossPlatformServiceIfFactory() {}

  virtual CrossPlatformServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CrossPlatformServiceIf* /* handler */) = 0;
};

class CrossPlatformServiceIfSingletonFactory : virtual public CrossPlatformServiceIfFactory {
 public:
  CrossPlatformServiceIfSingletonFactory(const ::std::shared_ptr<CrossPlatformServiceIf>& iface) : iface_(iface) {}
  virtual ~CrossPlatformServiceIfSingletonFactory() {}

  virtual CrossPlatformServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CrossPlatformServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<CrossPlatformServiceIf> iface_;
};

class CrossPlatformServiceNull : virtual public CrossPlatformServiceIf {
 public:
  virtual ~CrossPlatformServiceNull() {}
  void get(CrossPlatformResource& /* _return */, const int32_t /* id */) {
    return;
  }
  void save(const CrossPlatformResource& /* resource */) {
    return;
  }
  void getList(std::vector<CrossPlatformResource> & /* _return */) {
    return;
  }
  bool ping() {
    bool _return = false;
    return _return;
  }
};

typedef struct _CrossPlatformService_get_args__isset {
  _CrossPlatformService_get_args__isset() : id(false) {}
  bool id :1;
} _CrossPlatformService_get_args__isset;

class CrossPlatformService_get_args {
 public:

  CrossPlatformService_get_args(const CrossPlatformService_get_args&);
  CrossPlatformService_get_args& operator=(const CrossPlatformService_get_args&);
  CrossPlatformService_get_args() : id(0) {
  }

  virtual ~CrossPlatformService_get_args() noexcept;
  int32_t id;

  _CrossPlatformService_get_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CrossPlatformService_get_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CrossPlatformService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrossPlatformService_get_pargs {
 public:


  virtual ~CrossPlatformService_get_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_get_result__isset {
  _CrossPlatformService_get_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CrossPlatformService_get_result__isset;

class CrossPlatformService_get_result {
 public:

  CrossPlatformService_get_result(const CrossPlatformService_get_result&);
  CrossPlatformService_get_result& operator=(const CrossPlatformService_get_result&);
  CrossPlatformService_get_result() {
  }

  virtual ~CrossPlatformService_get_result() noexcept;
  CrossPlatformResource success;
  InvalidOperationException e;

  _CrossPlatformService_get_result__isset __isset;

  void __set_success(const CrossPlatformResource& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const CrossPlatformService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CrossPlatformService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_get_presult__isset {
  _CrossPlatformService_get_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CrossPlatformService_get_presult__isset;

class CrossPlatformService_get_presult {
 public:


  virtual ~CrossPlatformService_get_presult() noexcept;
  CrossPlatformResource* success;
  InvalidOperationException e;

  _CrossPlatformService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CrossPlatformService_save_args__isset {
  _CrossPlatformService_save_args__isset() : resource(false) {}
  bool resource :1;
} _CrossPlatformService_save_args__isset;

class CrossPlatformService_save_args {
 public:

  CrossPlatformService_save_args(const CrossPlatformService_save_args&);
  CrossPlatformService_save_args& operator=(const CrossPlatformService_save_args&);
  CrossPlatformService_save_args() {
  }

  virtual ~CrossPlatformService_save_args() noexcept;
  CrossPlatformResource resource;

  _CrossPlatformService_save_args__isset __isset;

  void __set_resource(const CrossPlatformResource& val);

  bool operator == (const CrossPlatformService_save_args & rhs) const
  {
    if (!(resource == rhs.resource))
      return false;
    return true;
  }
  bool operator != (const CrossPlatformService_save_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_save_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrossPlatformService_save_pargs {
 public:


  virtual ~CrossPlatformService_save_pargs() noexcept;
  const CrossPlatformResource* resource;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_save_result__isset {
  _CrossPlatformService_save_result__isset() : e(false) {}
  bool e :1;
} _CrossPlatformService_save_result__isset;

class CrossPlatformService_save_result {
 public:

  CrossPlatformService_save_result(const CrossPlatformService_save_result&);
  CrossPlatformService_save_result& operator=(const CrossPlatformService_save_result&);
  CrossPlatformService_save_result() {
  }

  virtual ~CrossPlatformService_save_result() noexcept;
  InvalidOperationException e;

  _CrossPlatformService_save_result__isset __isset;

  void __set_e(const InvalidOperationException& val);

  bool operator == (const CrossPlatformService_save_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CrossPlatformService_save_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_save_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_save_presult__isset {
  _CrossPlatformService_save_presult__isset() : e(false) {}
  bool e :1;
} _CrossPlatformService_save_presult__isset;

class CrossPlatformService_save_presult {
 public:


  virtual ~CrossPlatformService_save_presult() noexcept;
  InvalidOperationException e;

  _CrossPlatformService_save_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CrossPlatformService_getList_args {
 public:

  CrossPlatformService_getList_args(const CrossPlatformService_getList_args&);
  CrossPlatformService_getList_args& operator=(const CrossPlatformService_getList_args&);
  CrossPlatformService_getList_args() {
  }

  virtual ~CrossPlatformService_getList_args() noexcept;

  bool operator == (const CrossPlatformService_getList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CrossPlatformService_getList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_getList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrossPlatformService_getList_pargs {
 public:


  virtual ~CrossPlatformService_getList_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_getList_result__isset {
  _CrossPlatformService_getList_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CrossPlatformService_getList_result__isset;

class CrossPlatformService_getList_result {
 public:

  CrossPlatformService_getList_result(const CrossPlatformService_getList_result&);
  CrossPlatformService_getList_result& operator=(const CrossPlatformService_getList_result&);
  CrossPlatformService_getList_result() {
  }

  virtual ~CrossPlatformService_getList_result() noexcept;
  std::vector<CrossPlatformResource>  success;
  InvalidOperationException e;

  _CrossPlatformService_getList_result__isset __isset;

  void __set_success(const std::vector<CrossPlatformResource> & val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const CrossPlatformService_getList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CrossPlatformService_getList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_getList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_getList_presult__isset {
  _CrossPlatformService_getList_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CrossPlatformService_getList_presult__isset;

class CrossPlatformService_getList_presult {
 public:


  virtual ~CrossPlatformService_getList_presult() noexcept;
  std::vector<CrossPlatformResource> * success;
  InvalidOperationException e;

  _CrossPlatformService_getList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CrossPlatformService_ping_args {
 public:

  CrossPlatformService_ping_args(const CrossPlatformService_ping_args&);
  CrossPlatformService_ping_args& operator=(const CrossPlatformService_ping_args&);
  CrossPlatformService_ping_args() {
  }

  virtual ~CrossPlatformService_ping_args() noexcept;

  bool operator == (const CrossPlatformService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CrossPlatformService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrossPlatformService_ping_pargs {
 public:


  virtual ~CrossPlatformService_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_ping_result__isset {
  _CrossPlatformService_ping_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CrossPlatformService_ping_result__isset;

class CrossPlatformService_ping_result {
 public:

  CrossPlatformService_ping_result(const CrossPlatformService_ping_result&);
  CrossPlatformService_ping_result& operator=(const CrossPlatformService_ping_result&);
  CrossPlatformService_ping_result() : success(0) {
  }

  virtual ~CrossPlatformService_ping_result() noexcept;
  bool success;
  InvalidOperationException e;

  _CrossPlatformService_ping_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const CrossPlatformService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CrossPlatformService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrossPlatformService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrossPlatformService_ping_presult__isset {
  _CrossPlatformService_ping_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CrossPlatformService_ping_presult__isset;

class CrossPlatformService_ping_presult {
 public:


  virtual ~CrossPlatformService_ping_presult() noexcept;
  bool* success;
  InvalidOperationException e;

  _CrossPlatformService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CrossPlatformServiceClient : virtual public CrossPlatformServiceIf {
 public:
  CrossPlatformServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CrossPlatformServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(CrossPlatformResource& _return, const int32_t id);
  void send_get(const int32_t id);
  void recv_get(CrossPlatformResource& _return);
  void save(const CrossPlatformResource& resource);
  void send_save(const CrossPlatformResource& resource);
  void recv_save();
  void getList(std::vector<CrossPlatformResource> & _return);
  void send_getList();
  void recv_getList(std::vector<CrossPlatformResource> & _return);
  bool ping();
  void send_ping();
  bool recv_ping();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CrossPlatformServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CrossPlatformServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CrossPlatformServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_save(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CrossPlatformServiceProcessor(::std::shared_ptr<CrossPlatformServiceIf> iface) :
    iface_(iface) {
    processMap_["get"] = &CrossPlatformServiceProcessor::process_get;
    processMap_["save"] = &CrossPlatformServiceProcessor::process_save;
    processMap_["getList"] = &CrossPlatformServiceProcessor::process_getList;
    processMap_["ping"] = &CrossPlatformServiceProcessor::process_ping;
  }

  virtual ~CrossPlatformServiceProcessor() {}
};

class CrossPlatformServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CrossPlatformServiceProcessorFactory(const ::std::shared_ptr< CrossPlatformServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< CrossPlatformServiceIfFactory > handlerFactory_;
};

class CrossPlatformServiceMultiface : virtual public CrossPlatformServiceIf {
 public:
  CrossPlatformServiceMultiface(std::vector<std::shared_ptr<CrossPlatformServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CrossPlatformServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<CrossPlatformServiceIf> > ifaces_;
  CrossPlatformServiceMultiface() {}
  void add(::std::shared_ptr<CrossPlatformServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(CrossPlatformResource& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, id);
    }
    ifaces_[i]->get(_return, id);
    return;
  }

  void save(const CrossPlatformResource& resource) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->save(resource);
    }
    ifaces_[i]->save(resource);
  }

  void getList(std::vector<CrossPlatformResource> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getList(_return);
    }
    ifaces_[i]->getList(_return);
    return;
  }

  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CrossPlatformServiceConcurrentClient : virtual public CrossPlatformServiceIf {
 public:
  CrossPlatformServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CrossPlatformServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(CrossPlatformResource& _return, const int32_t id);
  int32_t send_get(const int32_t id);
  void recv_get(CrossPlatformResource& _return, const int32_t seqid);
  void save(const CrossPlatformResource& resource);
  int32_t send_save(const CrossPlatformResource& resource);
  void recv_save(const int32_t seqid);
  void getList(std::vector<CrossPlatformResource> & _return);
  int32_t send_getList();
  void recv_getList(std::vector<CrossPlatformResource> & _return, const int32_t seqid);
  bool ping();
  int32_t send_ping();
  bool recv_ping(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
