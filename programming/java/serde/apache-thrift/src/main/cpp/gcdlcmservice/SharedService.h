/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SharedService_H
#define SharedService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "gcdlcmservice_types.h"

namespace mayton { namespace gcdlcm {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SharedServiceIf {
 public:
  virtual ~SharedServiceIf() {}
  virtual int32_t gcd(const int32_t a, const int32_t b) = 0;
  virtual int32_t lcm(const int32_t a, const int32_t b) = 0;
};

class SharedServiceIfFactory {
 public:
  typedef SharedServiceIf Handler;

  virtual ~SharedServiceIfFactory() {}

  virtual SharedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SharedServiceIf* /* handler */) = 0;
};

class SharedServiceIfSingletonFactory : virtual public SharedServiceIfFactory {
 public:
  SharedServiceIfSingletonFactory(const ::std::shared_ptr<SharedServiceIf>& iface) : iface_(iface) {}
  virtual ~SharedServiceIfSingletonFactory() {}

  virtual SharedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SharedServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SharedServiceIf> iface_;
};

class SharedServiceNull : virtual public SharedServiceIf {
 public:
  virtual ~SharedServiceNull() {}
  int32_t gcd(const int32_t /* a */, const int32_t /* b */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t lcm(const int32_t /* a */, const int32_t /* b */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _SharedService_gcd_args__isset {
  _SharedService_gcd_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _SharedService_gcd_args__isset;

class SharedService_gcd_args {
 public:

  SharedService_gcd_args(const SharedService_gcd_args&);
  SharedService_gcd_args& operator=(const SharedService_gcd_args&);
  SharedService_gcd_args() : a(0), b(0) {
  }

  virtual ~SharedService_gcd_args() noexcept;
  int32_t a;
  int32_t b;

  _SharedService_gcd_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const SharedService_gcd_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const SharedService_gcd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_gcd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedService_gcd_pargs {
 public:


  virtual ~SharedService_gcd_pargs() noexcept;
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_gcd_result__isset {
  _SharedService_gcd_result__isset() : success(false) {}
  bool success :1;
} _SharedService_gcd_result__isset;

class SharedService_gcd_result {
 public:

  SharedService_gcd_result(const SharedService_gcd_result&);
  SharedService_gcd_result& operator=(const SharedService_gcd_result&);
  SharedService_gcd_result() : success(0) {
  }

  virtual ~SharedService_gcd_result() noexcept;
  int32_t success;

  _SharedService_gcd_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SharedService_gcd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SharedService_gcd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_gcd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_gcd_presult__isset {
  _SharedService_gcd_presult__isset() : success(false) {}
  bool success :1;
} _SharedService_gcd_presult__isset;

class SharedService_gcd_presult {
 public:


  virtual ~SharedService_gcd_presult() noexcept;
  int32_t* success;

  _SharedService_gcd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SharedService_lcm_args__isset {
  _SharedService_lcm_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _SharedService_lcm_args__isset;

class SharedService_lcm_args {
 public:

  SharedService_lcm_args(const SharedService_lcm_args&);
  SharedService_lcm_args& operator=(const SharedService_lcm_args&);
  SharedService_lcm_args() : a(0), b(0) {
  }

  virtual ~SharedService_lcm_args() noexcept;
  int32_t a;
  int32_t b;

  _SharedService_lcm_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const SharedService_lcm_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const SharedService_lcm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_lcm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedService_lcm_pargs {
 public:


  virtual ~SharedService_lcm_pargs() noexcept;
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_lcm_result__isset {
  _SharedService_lcm_result__isset() : success(false) {}
  bool success :1;
} _SharedService_lcm_result__isset;

class SharedService_lcm_result {
 public:

  SharedService_lcm_result(const SharedService_lcm_result&);
  SharedService_lcm_result& operator=(const SharedService_lcm_result&);
  SharedService_lcm_result() : success(0) {
  }

  virtual ~SharedService_lcm_result() noexcept;
  int32_t success;

  _SharedService_lcm_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SharedService_lcm_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SharedService_lcm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_lcm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_lcm_presult__isset {
  _SharedService_lcm_presult__isset() : success(false) {}
  bool success :1;
} _SharedService_lcm_presult__isset;

class SharedService_lcm_presult {
 public:


  virtual ~SharedService_lcm_presult() noexcept;
  int32_t* success;

  _SharedService_lcm_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SharedServiceClient : virtual public SharedServiceIf {
 public:
  SharedServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SharedServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t gcd(const int32_t a, const int32_t b);
  void send_gcd(const int32_t a, const int32_t b);
  int32_t recv_gcd();
  int32_t lcm(const int32_t a, const int32_t b);
  void send_lcm(const int32_t a, const int32_t b);
  int32_t recv_lcm();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SharedServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SharedServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SharedServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_gcd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lcm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SharedServiceProcessor(::std::shared_ptr<SharedServiceIf> iface) :
    iface_(iface) {
    processMap_["gcd"] = &SharedServiceProcessor::process_gcd;
    processMap_["lcm"] = &SharedServiceProcessor::process_lcm;
  }

  virtual ~SharedServiceProcessor() {}
};

class SharedServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SharedServiceProcessorFactory(const ::std::shared_ptr< SharedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SharedServiceIfFactory > handlerFactory_;
};

class SharedServiceMultiface : virtual public SharedServiceIf {
 public:
  SharedServiceMultiface(std::vector<std::shared_ptr<SharedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SharedServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SharedServiceIf> > ifaces_;
  SharedServiceMultiface() {}
  void add(::std::shared_ptr<SharedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t gcd(const int32_t a, const int32_t b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->gcd(a, b);
    }
    return ifaces_[i]->gcd(a, b);
  }

  int32_t lcm(const int32_t a, const int32_t b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lcm(a, b);
    }
    return ifaces_[i]->lcm(a, b);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SharedServiceConcurrentClient : virtual public SharedServiceIf {
 public:
  SharedServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SharedServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t gcd(const int32_t a, const int32_t b);
  int32_t send_gcd(const int32_t a, const int32_t b);
  int32_t recv_gcd(const int32_t seqid);
  int32_t lcm(const int32_t a, const int32_t b);
  int32_t send_lcm(const int32_t a, const int32_t b);
  int32_t recv_lcm(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
