/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mayton.geo.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-07-07")
public class GeoIpCity implements org.apache.thrift.TBase<GeoIpCity, GeoIpCity._Fields>, java.io.Serializable, Cloneable, Comparable<GeoIpCity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeoIpCity");

  private static final org.apache.thrift.protocol.TField START_IP_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("startIpNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField END_IP_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("endIpNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POSTAL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("postalCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField DMA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dmaCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GeoIpCityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GeoIpCityTupleSchemeFactory();

  public int startIpNum; // required
  public int endIpNum; // required
  /**
   * 
   * @see Country
   */
  public @org.apache.thrift.annotation.Nullable Country country; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String region; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String city; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String postalCode; // optional
  public double latitude; // required
  public double longitude; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String dmaCode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String areaCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_IP_NUM((short)1, "startIpNum"),
    END_IP_NUM((short)2, "endIpNum"),
    /**
     * 
     * @see Country
     */
    COUNTRY((short)3, "country"),
    REGION((short)4, "region"),
    CITY((short)5, "city"),
    POSTAL_CODE((short)6, "postalCode"),
    LATITUDE((short)7, "latitude"),
    LONGITUDE((short)8, "longitude"),
    DMA_CODE((short)9, "dmaCode"),
    AREA_CODE((short)10, "areaCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_IP_NUM
          return START_IP_NUM;
        case 2: // END_IP_NUM
          return END_IP_NUM;
        case 3: // COUNTRY
          return COUNTRY;
        case 4: // REGION
          return REGION;
        case 5: // CITY
          return CITY;
        case 6: // POSTAL_CODE
          return POSTAL_CODE;
        case 7: // LATITUDE
          return LATITUDE;
        case 8: // LONGITUDE
          return LONGITUDE;
        case 9: // DMA_CODE
          return DMA_CODE;
        case 10: // AREA_CODE
          return AREA_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTIPNUM_ISSET_ID = 0;
  private static final int __ENDIPNUM_ISSET_ID = 1;
  private static final int __LATITUDE_ISSET_ID = 2;
  private static final int __LONGITUDE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COUNTRY,_Fields.REGION,_Fields.CITY,_Fields.POSTAL_CODE,_Fields.DMA_CODE,_Fields.AREA_CODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_IP_NUM, new org.apache.thrift.meta_data.FieldMetaData("startIpNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_IP_NUM, new org.apache.thrift.meta_data.FieldMetaData("endIpNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Country.class)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSTAL_CODE, new org.apache.thrift.meta_data.FieldMetaData("postalCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DMA_CODE, new org.apache.thrift.meta_data.FieldMetaData("dmaCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeoIpCity.class, metaDataMap);
  }

  public GeoIpCity() {
  }

  public GeoIpCity(
    int startIpNum,
    int endIpNum,
    double latitude,
    double longitude)
  {
    this();
    this.startIpNum = startIpNum;
    setStartIpNumIsSet(true);
    this.endIpNum = endIpNum;
    setEndIpNumIsSet(true);
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.longitude = longitude;
    setLongitudeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeoIpCity(GeoIpCity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startIpNum = other.startIpNum;
    this.endIpNum = other.endIpNum;
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetPostalCode()) {
      this.postalCode = other.postalCode;
    }
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    if (other.isSetDmaCode()) {
      this.dmaCode = other.dmaCode;
    }
    if (other.isSetAreaCode()) {
      this.areaCode = other.areaCode;
    }
  }

  public GeoIpCity deepCopy() {
    return new GeoIpCity(this);
  }

  @Override
  public void clear() {
    setStartIpNumIsSet(false);
    this.startIpNum = 0;
    setEndIpNumIsSet(false);
    this.endIpNum = 0;
    this.country = null;
    this.region = null;
    this.city = null;
    this.postalCode = null;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    this.dmaCode = null;
    this.areaCode = null;
  }

  public int getStartIpNum() {
    return this.startIpNum;
  }

  public GeoIpCity setStartIpNum(int startIpNum) {
    this.startIpNum = startIpNum;
    setStartIpNumIsSet(true);
    return this;
  }

  public void unsetStartIpNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTIPNUM_ISSET_ID);
  }

  /** Returns true if field startIpNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIpNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTIPNUM_ISSET_ID);
  }

  public void setStartIpNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTIPNUM_ISSET_ID, value);
  }

  public int getEndIpNum() {
    return this.endIpNum;
  }

  public GeoIpCity setEndIpNum(int endIpNum) {
    this.endIpNum = endIpNum;
    setEndIpNumIsSet(true);
    return this;
  }

  public void unsetEndIpNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDIPNUM_ISSET_ID);
  }

  /** Returns true if field endIpNum is set (has been assigned a value) and false otherwise */
  public boolean isSetEndIpNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDIPNUM_ISSET_ID);
  }

  public void setEndIpNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDIPNUM_ISSET_ID, value);
  }

  /**
   * 
   * @see Country
   */
  public org.apache.thrift.Option<Country> getCountry() {
    if (this.isSetCountry()) {
      return org.apache.thrift.Option.some(this.country);
    } else {
      return org.apache.thrift.Option.none();
    }
  }

  /**
   * 
   * @see Country
   */
  public GeoIpCity setCountry(@org.apache.thrift.annotation.Nullable Country country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public org.apache.thrift.Option<java.lang.String> getRegion() {
    if (this.isSetRegion()) {
      return org.apache.thrift.Option.some(this.region);
    } else {
      return org.apache.thrift.Option.none();
    }
  }

  public GeoIpCity setRegion(@org.apache.thrift.annotation.Nullable java.lang.String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public org.apache.thrift.Option<java.lang.String> getCity() {
    if (this.isSetCity()) {
      return org.apache.thrift.Option.some(this.city);
    } else {
      return org.apache.thrift.Option.none();
    }
  }

  public GeoIpCity setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public org.apache.thrift.Option<java.lang.String> getPostalCode() {
    if (this.isSetPostalCode()) {
      return org.apache.thrift.Option.some(this.postalCode);
    } else {
      return org.apache.thrift.Option.none();
    }
  }

  public GeoIpCity setPostalCode(@org.apache.thrift.annotation.Nullable java.lang.String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  public void unsetPostalCode() {
    this.postalCode = null;
  }

  /** Returns true if field postalCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPostalCode() {
    return this.postalCode != null;
  }

  public void setPostalCodeIsSet(boolean value) {
    if (!value) {
      this.postalCode = null;
    }
  }

  public double getLatitude() {
    return this.latitude;
  }

  public GeoIpCity setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public GeoIpCity setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public org.apache.thrift.Option<java.lang.String> getDmaCode() {
    if (this.isSetDmaCode()) {
      return org.apache.thrift.Option.some(this.dmaCode);
    } else {
      return org.apache.thrift.Option.none();
    }
  }

  public GeoIpCity setDmaCode(@org.apache.thrift.annotation.Nullable java.lang.String dmaCode) {
    this.dmaCode = dmaCode;
    return this;
  }

  public void unsetDmaCode() {
    this.dmaCode = null;
  }

  /** Returns true if field dmaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDmaCode() {
    return this.dmaCode != null;
  }

  public void setDmaCodeIsSet(boolean value) {
    if (!value) {
      this.dmaCode = null;
    }
  }

  public org.apache.thrift.Option<java.lang.String> getAreaCode() {
    if (this.isSetAreaCode()) {
      return org.apache.thrift.Option.some(this.areaCode);
    } else {
      return org.apache.thrift.Option.none();
    }
  }

  public GeoIpCity setAreaCode(@org.apache.thrift.annotation.Nullable java.lang.String areaCode) {
    this.areaCode = areaCode;
    return this;
  }

  public void unsetAreaCode() {
    this.areaCode = null;
  }

  /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCode() {
    return this.areaCode != null;
  }

  public void setAreaCodeIsSet(boolean value) {
    if (!value) {
      this.areaCode = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case START_IP_NUM:
      if (value == null) {
        unsetStartIpNum();
      } else {
        setStartIpNum((java.lang.Integer)value);
      }
      break;

    case END_IP_NUM:
      if (value == null) {
        unsetEndIpNum();
      } else {
        setEndIpNum((java.lang.Integer)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((Country)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    case POSTAL_CODE:
      if (value == null) {
        unsetPostalCode();
      } else {
        setPostalCode((java.lang.String)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((java.lang.Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((java.lang.Double)value);
      }
      break;

    case DMA_CODE:
      if (value == null) {
        unsetDmaCode();
      } else {
        setDmaCode((java.lang.String)value);
      }
      break;

    case AREA_CODE:
      if (value == null) {
        unsetAreaCode();
      } else {
        setAreaCode((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case START_IP_NUM:
      return getStartIpNum();

    case END_IP_NUM:
      return getEndIpNum();

    case COUNTRY:
      return getCountry();

    case REGION:
      return getRegion();

    case CITY:
      return getCity();

    case POSTAL_CODE:
      return getPostalCode();

    case LATITUDE:
      return getLatitude();

    case LONGITUDE:
      return getLongitude();

    case DMA_CODE:
      return getDmaCode();

    case AREA_CODE:
      return getAreaCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case START_IP_NUM:
      return isSetStartIpNum();
    case END_IP_NUM:
      return isSetEndIpNum();
    case COUNTRY:
      return isSetCountry();
    case REGION:
      return isSetRegion();
    case CITY:
      return isSetCity();
    case POSTAL_CODE:
      return isSetPostalCode();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case DMA_CODE:
      return isSetDmaCode();
    case AREA_CODE:
      return isSetAreaCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GeoIpCity)
      return this.equals((GeoIpCity)that);
    return false;
  }

  public boolean equals(GeoIpCity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_startIpNum = true;
    boolean that_present_startIpNum = true;
    if (this_present_startIpNum || that_present_startIpNum) {
      if (!(this_present_startIpNum && that_present_startIpNum))
        return false;
      if (this.startIpNum != that.startIpNum)
        return false;
    }

    boolean this_present_endIpNum = true;
    boolean that_present_endIpNum = true;
    if (this_present_endIpNum || that_present_endIpNum) {
      if (!(this_present_endIpNum && that_present_endIpNum))
        return false;
      if (this.endIpNum != that.endIpNum)
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_postalCode = true && this.isSetPostalCode();
    boolean that_present_postalCode = true && that.isSetPostalCode();
    if (this_present_postalCode || that_present_postalCode) {
      if (!(this_present_postalCode && that_present_postalCode))
        return false;
      if (!this.postalCode.equals(that.postalCode))
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_dmaCode = true && this.isSetDmaCode();
    boolean that_present_dmaCode = true && that.isSetDmaCode();
    if (this_present_dmaCode || that_present_dmaCode) {
      if (!(this_present_dmaCode && that_present_dmaCode))
        return false;
      if (!this.dmaCode.equals(that.dmaCode))
        return false;
    }

    boolean this_present_areaCode = true && this.isSetAreaCode();
    boolean that_present_areaCode = true && that.isSetAreaCode();
    if (this_present_areaCode || that_present_areaCode) {
      if (!(this_present_areaCode && that_present_areaCode))
        return false;
      if (!this.areaCode.equals(that.areaCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + startIpNum;

    hashCode = hashCode * 8191 + endIpNum;

    hashCode = hashCode * 8191 + ((isSetCountry()) ? 131071 : 524287);
    if (isSetCountry())
      hashCode = hashCode * 8191 + country.getValue();

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostalCode()) ? 131071 : 524287);
    if (isSetPostalCode())
      hashCode = hashCode * 8191 + postalCode.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(latitude);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(longitude);

    hashCode = hashCode * 8191 + ((isSetDmaCode()) ? 131071 : 524287);
    if (isSetDmaCode())
      hashCode = hashCode * 8191 + dmaCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetAreaCode()) ? 131071 : 524287);
    if (isSetAreaCode())
      hashCode = hashCode * 8191 + areaCode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GeoIpCity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStartIpNum()).compareTo(other.isSetStartIpNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIpNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIpNum, other.startIpNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndIpNum()).compareTo(other.isSetEndIpNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndIpNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endIpNum, other.endIpNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPostalCode()).compareTo(other.isSetPostalCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostalCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postalCode, other.postalCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDmaCode()).compareTo(other.isSetDmaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmaCode, other.dmaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GeoIpCity(");
    boolean first = true;

    sb.append("startIpNum:");
    sb.append(this.startIpNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endIpNum:");
    sb.append(this.endIpNum);
    first = false;
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetPostalCode()) {
      if (!first) sb.append(", ");
      sb.append("postalCode:");
      if (this.postalCode == null) {
        sb.append("null");
      } else {
        sb.append(this.postalCode);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (isSetDmaCode()) {
      if (!first) sb.append(", ");
      sb.append("dmaCode:");
      if (this.dmaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.dmaCode);
      }
      first = false;
    }
    if (isSetAreaCode()) {
      if (!first) sb.append(", ");
      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'startIpNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endIpNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'latitude' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'longitude' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeoIpCityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GeoIpCityStandardScheme getScheme() {
      return new GeoIpCityStandardScheme();
    }
  }

  private static class GeoIpCityStandardScheme extends org.apache.thrift.scheme.StandardScheme<GeoIpCity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeoIpCity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_IP_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startIpNum = iprot.readI32();
              struct.setStartIpNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_IP_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endIpNum = iprot.readI32();
              struct.setEndIpNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.country = mayton.geo.generated.Country.findByValue(iprot.readI32());
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSTAL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postalCode = iprot.readString();
              struct.setPostalCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DMA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dmaCode = iprot.readString();
              struct.setDmaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaCode = iprot.readString();
              struct.setAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStartIpNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startIpNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndIpNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endIpNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLatitude()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'latitude' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLongitude()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'longitude' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeoIpCity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_IP_NUM_FIELD_DESC);
      oprot.writeI32(struct.startIpNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_IP_NUM_FIELD_DESC);
      oprot.writeI32(struct.endIpNum);
      oprot.writeFieldEnd();
      if (struct.country != null) {
        if (struct.isSetCountry()) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeI32(struct.country.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postalCode != null) {
        if (struct.isSetPostalCode()) {
          oprot.writeFieldBegin(POSTAL_CODE_FIELD_DESC);
          oprot.writeString(struct.postalCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      if (struct.dmaCode != null) {
        if (struct.isSetDmaCode()) {
          oprot.writeFieldBegin(DMA_CODE_FIELD_DESC);
          oprot.writeString(struct.dmaCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.areaCode != null) {
        if (struct.isSetAreaCode()) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeoIpCityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GeoIpCityTupleScheme getScheme() {
      return new GeoIpCityTupleScheme();
    }
  }

  private static class GeoIpCityTupleScheme extends org.apache.thrift.scheme.TupleScheme<GeoIpCity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeoIpCity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.startIpNum);
      oprot.writeI32(struct.endIpNum);
      oprot.writeDouble(struct.latitude);
      oprot.writeDouble(struct.longitude);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCountry()) {
        optionals.set(0);
      }
      if (struct.isSetRegion()) {
        optionals.set(1);
      }
      if (struct.isSetCity()) {
        optionals.set(2);
      }
      if (struct.isSetPostalCode()) {
        optionals.set(3);
      }
      if (struct.isSetDmaCode()) {
        optionals.set(4);
      }
      if (struct.isSetAreaCode()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCountry()) {
        oprot.writeI32(struct.country.getValue());
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetPostalCode()) {
        oprot.writeString(struct.postalCode);
      }
      if (struct.isSetDmaCode()) {
        oprot.writeString(struct.dmaCode);
      }
      if (struct.isSetAreaCode()) {
        oprot.writeString(struct.areaCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeoIpCity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.startIpNum = iprot.readI32();
      struct.setStartIpNumIsSet(true);
      struct.endIpNum = iprot.readI32();
      struct.setEndIpNumIsSet(true);
      struct.latitude = iprot.readDouble();
      struct.setLatitudeIsSet(true);
      struct.longitude = iprot.readDouble();
      struct.setLongitudeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.country = mayton.geo.generated.Country.findByValue(iprot.readI32());
        struct.setCountryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.postalCode = iprot.readString();
        struct.setPostalCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dmaCode = iprot.readString();
        struct.setDmaCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.areaCode = iprot.readString();
        struct.setAreaCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

