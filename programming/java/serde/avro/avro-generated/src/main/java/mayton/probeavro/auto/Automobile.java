/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mayton.probeavro.auto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Automobile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6115095272202037398L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Automobile\",\"namespace\":\"mayton.probeavro.auto\",\"fields\":[{\"name\":\"modelName\",\"type\":\"string\"},{\"name\":\"make\",\"type\":\"string\"},{\"name\":\"modelYear\",\"type\":\"int\"},{\"name\":\"passengerCapacity\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Automobile> ENCODER =
      new BinaryMessageEncoder<Automobile>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Automobile> DECODER =
      new BinaryMessageDecoder<Automobile>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Automobile> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Automobile> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Automobile> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Automobile>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Automobile to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Automobile from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Automobile instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Automobile fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence modelName;
   private java.lang.CharSequence make;
   private int modelYear;
   private int passengerCapacity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Automobile() {}

  /**
   * All-args constructor.
   * @param modelName The new value for modelName
   * @param make The new value for make
   * @param modelYear The new value for modelYear
   * @param passengerCapacity The new value for passengerCapacity
   */
  public Automobile(java.lang.CharSequence modelName, java.lang.CharSequence make, java.lang.Integer modelYear, java.lang.Integer passengerCapacity) {
    this.modelName = modelName;
    this.make = make;
    this.modelYear = modelYear;
    this.passengerCapacity = passengerCapacity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return modelName;
    case 1: return make;
    case 2: return modelYear;
    case 3: return passengerCapacity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: modelName = (java.lang.CharSequence)value$; break;
    case 1: make = (java.lang.CharSequence)value$; break;
    case 2: modelYear = (java.lang.Integer)value$; break;
    case 3: passengerCapacity = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'modelName' field.
   * @return The value of the 'modelName' field.
   */
  public java.lang.CharSequence getModelName() {
    return modelName;
  }


  /**
   * Sets the value of the 'modelName' field.
   * @param value the value to set.
   */
  public void setModelName(java.lang.CharSequence value) {
    this.modelName = value;
  }

  /**
   * Gets the value of the 'make' field.
   * @return The value of the 'make' field.
   */
  public java.lang.CharSequence getMake() {
    return make;
  }


  /**
   * Sets the value of the 'make' field.
   * @param value the value to set.
   */
  public void setMake(java.lang.CharSequence value) {
    this.make = value;
  }

  /**
   * Gets the value of the 'modelYear' field.
   * @return The value of the 'modelYear' field.
   */
  public int getModelYear() {
    return modelYear;
  }


  /**
   * Sets the value of the 'modelYear' field.
   * @param value the value to set.
   */
  public void setModelYear(int value) {
    this.modelYear = value;
  }

  /**
   * Gets the value of the 'passengerCapacity' field.
   * @return The value of the 'passengerCapacity' field.
   */
  public int getPassengerCapacity() {
    return passengerCapacity;
  }


  /**
   * Sets the value of the 'passengerCapacity' field.
   * @param value the value to set.
   */
  public void setPassengerCapacity(int value) {
    this.passengerCapacity = value;
  }

  /**
   * Creates a new Automobile RecordBuilder.
   * @return A new Automobile RecordBuilder
   */
  public static mayton.probeavro.auto.Automobile.Builder newBuilder() {
    return new mayton.probeavro.auto.Automobile.Builder();
  }

  /**
   * Creates a new Automobile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Automobile RecordBuilder
   */
  public static mayton.probeavro.auto.Automobile.Builder newBuilder(mayton.probeavro.auto.Automobile.Builder other) {
    if (other == null) {
      return new mayton.probeavro.auto.Automobile.Builder();
    } else {
      return new mayton.probeavro.auto.Automobile.Builder(other);
    }
  }

  /**
   * Creates a new Automobile RecordBuilder by copying an existing Automobile instance.
   * @param other The existing instance to copy.
   * @return A new Automobile RecordBuilder
   */
  public static mayton.probeavro.auto.Automobile.Builder newBuilder(mayton.probeavro.auto.Automobile other) {
    if (other == null) {
      return new mayton.probeavro.auto.Automobile.Builder();
    } else {
      return new mayton.probeavro.auto.Automobile.Builder(other);
    }
  }

  /**
   * RecordBuilder for Automobile instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Automobile>
    implements org.apache.avro.data.RecordBuilder<Automobile> {

    private java.lang.CharSequence modelName;
    private java.lang.CharSequence make;
    private int modelYear;
    private int passengerCapacity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mayton.probeavro.auto.Automobile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.modelName)) {
        this.modelName = data().deepCopy(fields()[0].schema(), other.modelName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.make)) {
        this.make = data().deepCopy(fields()[1].schema(), other.make);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.modelYear)) {
        this.modelYear = data().deepCopy(fields()[2].schema(), other.modelYear);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.passengerCapacity)) {
        this.passengerCapacity = data().deepCopy(fields()[3].schema(), other.passengerCapacity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Automobile instance
     * @param other The existing instance to copy.
     */
    private Builder(mayton.probeavro.auto.Automobile other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.modelName)) {
        this.modelName = data().deepCopy(fields()[0].schema(), other.modelName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.make)) {
        this.make = data().deepCopy(fields()[1].schema(), other.make);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.modelYear)) {
        this.modelYear = data().deepCopy(fields()[2].schema(), other.modelYear);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.passengerCapacity)) {
        this.passengerCapacity = data().deepCopy(fields()[3].schema(), other.passengerCapacity);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'modelName' field.
      * @return The value.
      */
    public java.lang.CharSequence getModelName() {
      return modelName;
    }


    /**
      * Sets the value of the 'modelName' field.
      * @param value The value of 'modelName'.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder setModelName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.modelName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'modelName' field has been set.
      * @return True if the 'modelName' field has been set, false otherwise.
      */
    public boolean hasModelName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'modelName' field.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder clearModelName() {
      modelName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'make' field.
      * @return The value.
      */
    public java.lang.CharSequence getMake() {
      return make;
    }


    /**
      * Sets the value of the 'make' field.
      * @param value The value of 'make'.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder setMake(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.make = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'make' field has been set.
      * @return True if the 'make' field has been set, false otherwise.
      */
    public boolean hasMake() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'make' field.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder clearMake() {
      make = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'modelYear' field.
      * @return The value.
      */
    public int getModelYear() {
      return modelYear;
    }


    /**
      * Sets the value of the 'modelYear' field.
      * @param value The value of 'modelYear'.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder setModelYear(int value) {
      validate(fields()[2], value);
      this.modelYear = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'modelYear' field has been set.
      * @return True if the 'modelYear' field has been set, false otherwise.
      */
    public boolean hasModelYear() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'modelYear' field.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder clearModelYear() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'passengerCapacity' field.
      * @return The value.
      */
    public int getPassengerCapacity() {
      return passengerCapacity;
    }


    /**
      * Sets the value of the 'passengerCapacity' field.
      * @param value The value of 'passengerCapacity'.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder setPassengerCapacity(int value) {
      validate(fields()[3], value);
      this.passengerCapacity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'passengerCapacity' field has been set.
      * @return True if the 'passengerCapacity' field has been set, false otherwise.
      */
    public boolean hasPassengerCapacity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'passengerCapacity' field.
      * @return This builder.
      */
    public mayton.probeavro.auto.Automobile.Builder clearPassengerCapacity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Automobile build() {
      try {
        Automobile record = new Automobile();
        record.modelName = fieldSetFlags()[0] ? this.modelName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.make = fieldSetFlags()[1] ? this.make : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.modelYear = fieldSetFlags()[2] ? this.modelYear : (java.lang.Integer) defaultValue(fields()[2]);
        record.passengerCapacity = fieldSetFlags()[3] ? this.passengerCapacity : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Automobile>
    WRITER$ = (org.apache.avro.io.DatumWriter<Automobile>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Automobile>
    READER$ = (org.apache.avro.io.DatumReader<Automobile>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.modelName);

    out.writeString(this.make);

    out.writeInt(this.modelYear);

    out.writeInt(this.passengerCapacity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.modelName = in.readString(this.modelName instanceof Utf8 ? (Utf8)this.modelName : null);

      this.make = in.readString(this.make instanceof Utf8 ? (Utf8)this.make : null);

      this.modelYear = in.readInt();

      this.passengerCapacity = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.modelName = in.readString(this.modelName instanceof Utf8 ? (Utf8)this.modelName : null);
          break;

        case 1:
          this.make = in.readString(this.make instanceof Utf8 ? (Utf8)this.make : null);
          break;

        case 2:
          this.modelYear = in.readInt();
          break;

        case 3:
          this.passengerCapacity = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










