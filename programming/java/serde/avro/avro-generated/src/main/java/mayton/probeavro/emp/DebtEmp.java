/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mayton.probeavro.emp;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DebtEmp extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1016723444046463738L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DebtEmp\",\"namespace\":\"mayton.probeavro.emp\",\"fields\":[{\"name\":\"DEBTNO\",\"type\":\"int\"},{\"name\":\"DEBTNAME\",\"type\":\"string\"},{\"name\":\"LOC\",\"type\":\"string\"},{\"name\":\"EMPS\",\"type\":{\"type\":\"record\",\"name\":\"EMPSRecord\",\"fields\":[{\"name\":\"ENAME\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DebtEmp> ENCODER =
      new BinaryMessageEncoder<DebtEmp>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DebtEmp> DECODER =
      new BinaryMessageDecoder<DebtEmp>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DebtEmp> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DebtEmp> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DebtEmp> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DebtEmp>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DebtEmp to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DebtEmp from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DebtEmp instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DebtEmp fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int DEBTNO;
   private java.lang.CharSequence DEBTNAME;
   private java.lang.CharSequence LOC;
   private mayton.probeavro.emp.EMPSRecord EMPS;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DebtEmp() {}

  /**
   * All-args constructor.
   * @param DEBTNO The new value for DEBTNO
   * @param DEBTNAME The new value for DEBTNAME
   * @param LOC The new value for LOC
   * @param EMPS The new value for EMPS
   */
  public DebtEmp(java.lang.Integer DEBTNO, java.lang.CharSequence DEBTNAME, java.lang.CharSequence LOC, mayton.probeavro.emp.EMPSRecord EMPS) {
    this.DEBTNO = DEBTNO;
    this.DEBTNAME = DEBTNAME;
    this.LOC = LOC;
    this.EMPS = EMPS;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return DEBTNO;
    case 1: return DEBTNAME;
    case 2: return LOC;
    case 3: return EMPS;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: DEBTNO = (java.lang.Integer)value$; break;
    case 1: DEBTNAME = (java.lang.CharSequence)value$; break;
    case 2: LOC = (java.lang.CharSequence)value$; break;
    case 3: EMPS = (mayton.probeavro.emp.EMPSRecord)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'DEBTNO' field.
   * @return The value of the 'DEBTNO' field.
   */
  public int getDEBTNO() {
    return DEBTNO;
  }


  /**
   * Sets the value of the 'DEBTNO' field.
   * @param value the value to set.
   */
  public void setDEBTNO(int value) {
    this.DEBTNO = value;
  }

  /**
   * Gets the value of the 'DEBTNAME' field.
   * @return The value of the 'DEBTNAME' field.
   */
  public java.lang.CharSequence getDEBTNAME() {
    return DEBTNAME;
  }


  /**
   * Sets the value of the 'DEBTNAME' field.
   * @param value the value to set.
   */
  public void setDEBTNAME(java.lang.CharSequence value) {
    this.DEBTNAME = value;
  }

  /**
   * Gets the value of the 'LOC' field.
   * @return The value of the 'LOC' field.
   */
  public java.lang.CharSequence getLOC() {
    return LOC;
  }


  /**
   * Sets the value of the 'LOC' field.
   * @param value the value to set.
   */
  public void setLOC(java.lang.CharSequence value) {
    this.LOC = value;
  }

  /**
   * Gets the value of the 'EMPS' field.
   * @return The value of the 'EMPS' field.
   */
  public mayton.probeavro.emp.EMPSRecord getEMPS() {
    return EMPS;
  }


  /**
   * Sets the value of the 'EMPS' field.
   * @param value the value to set.
   */
  public void setEMPS(mayton.probeavro.emp.EMPSRecord value) {
    this.EMPS = value;
  }

  /**
   * Creates a new DebtEmp RecordBuilder.
   * @return A new DebtEmp RecordBuilder
   */
  public static mayton.probeavro.emp.DebtEmp.Builder newBuilder() {
    return new mayton.probeavro.emp.DebtEmp.Builder();
  }

  /**
   * Creates a new DebtEmp RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DebtEmp RecordBuilder
   */
  public static mayton.probeavro.emp.DebtEmp.Builder newBuilder(mayton.probeavro.emp.DebtEmp.Builder other) {
    if (other == null) {
      return new mayton.probeavro.emp.DebtEmp.Builder();
    } else {
      return new mayton.probeavro.emp.DebtEmp.Builder(other);
    }
  }

  /**
   * Creates a new DebtEmp RecordBuilder by copying an existing DebtEmp instance.
   * @param other The existing instance to copy.
   * @return A new DebtEmp RecordBuilder
   */
  public static mayton.probeavro.emp.DebtEmp.Builder newBuilder(mayton.probeavro.emp.DebtEmp other) {
    if (other == null) {
      return new mayton.probeavro.emp.DebtEmp.Builder();
    } else {
      return new mayton.probeavro.emp.DebtEmp.Builder(other);
    }
  }

  /**
   * RecordBuilder for DebtEmp instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DebtEmp>
    implements org.apache.avro.data.RecordBuilder<DebtEmp> {

    private int DEBTNO;
    private java.lang.CharSequence DEBTNAME;
    private java.lang.CharSequence LOC;
    private mayton.probeavro.emp.EMPSRecord EMPS;
    private mayton.probeavro.emp.EMPSRecord.Builder EMPSBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mayton.probeavro.emp.DebtEmp.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.DEBTNO)) {
        this.DEBTNO = data().deepCopy(fields()[0].schema(), other.DEBTNO);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.DEBTNAME)) {
        this.DEBTNAME = data().deepCopy(fields()[1].schema(), other.DEBTNAME);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.LOC)) {
        this.LOC = data().deepCopy(fields()[2].schema(), other.LOC);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.EMPS)) {
        this.EMPS = data().deepCopy(fields()[3].schema(), other.EMPS);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasEMPSBuilder()) {
        this.EMPSBuilder = mayton.probeavro.emp.EMPSRecord.newBuilder(other.getEMPSBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DebtEmp instance
     * @param other The existing instance to copy.
     */
    private Builder(mayton.probeavro.emp.DebtEmp other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.DEBTNO)) {
        this.DEBTNO = data().deepCopy(fields()[0].schema(), other.DEBTNO);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.DEBTNAME)) {
        this.DEBTNAME = data().deepCopy(fields()[1].schema(), other.DEBTNAME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.LOC)) {
        this.LOC = data().deepCopy(fields()[2].schema(), other.LOC);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EMPS)) {
        this.EMPS = data().deepCopy(fields()[3].schema(), other.EMPS);
        fieldSetFlags()[3] = true;
      }
      this.EMPSBuilder = null;
    }

    /**
      * Gets the value of the 'DEBTNO' field.
      * @return The value.
      */
    public int getDEBTNO() {
      return DEBTNO;
    }


    /**
      * Sets the value of the 'DEBTNO' field.
      * @param value The value of 'DEBTNO'.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder setDEBTNO(int value) {
      validate(fields()[0], value);
      this.DEBTNO = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'DEBTNO' field has been set.
      * @return True if the 'DEBTNO' field has been set, false otherwise.
      */
    public boolean hasDEBTNO() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'DEBTNO' field.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder clearDEBTNO() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'DEBTNAME' field.
      * @return The value.
      */
    public java.lang.CharSequence getDEBTNAME() {
      return DEBTNAME;
    }


    /**
      * Sets the value of the 'DEBTNAME' field.
      * @param value The value of 'DEBTNAME'.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder setDEBTNAME(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.DEBTNAME = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'DEBTNAME' field has been set.
      * @return True if the 'DEBTNAME' field has been set, false otherwise.
      */
    public boolean hasDEBTNAME() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'DEBTNAME' field.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder clearDEBTNAME() {
      DEBTNAME = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'LOC' field.
      * @return The value.
      */
    public java.lang.CharSequence getLOC() {
      return LOC;
    }


    /**
      * Sets the value of the 'LOC' field.
      * @param value The value of 'LOC'.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder setLOC(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.LOC = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'LOC' field has been set.
      * @return True if the 'LOC' field has been set, false otherwise.
      */
    public boolean hasLOC() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'LOC' field.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder clearLOC() {
      LOC = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMPS' field.
      * @return The value.
      */
    public mayton.probeavro.emp.EMPSRecord getEMPS() {
      return EMPS;
    }


    /**
      * Sets the value of the 'EMPS' field.
      * @param value The value of 'EMPS'.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder setEMPS(mayton.probeavro.emp.EMPSRecord value) {
      validate(fields()[3], value);
      this.EMPSBuilder = null;
      this.EMPS = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'EMPS' field has been set.
      * @return True if the 'EMPS' field has been set, false otherwise.
      */
    public boolean hasEMPS() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'EMPS' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public mayton.probeavro.emp.EMPSRecord.Builder getEMPSBuilder() {
      if (EMPSBuilder == null) {
        if (hasEMPS()) {
          setEMPSBuilder(mayton.probeavro.emp.EMPSRecord.newBuilder(EMPS));
        } else {
          setEMPSBuilder(mayton.probeavro.emp.EMPSRecord.newBuilder());
        }
      }
      return EMPSBuilder;
    }

    /**
     * Sets the Builder instance for the 'EMPS' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public mayton.probeavro.emp.DebtEmp.Builder setEMPSBuilder(mayton.probeavro.emp.EMPSRecord.Builder value) {
      clearEMPS();
      EMPSBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EMPS' field has an active Builder instance
     * @return True if the 'EMPS' field has an active Builder instance
     */
    public boolean hasEMPSBuilder() {
      return EMPSBuilder != null;
    }

    /**
      * Clears the value of the 'EMPS' field.
      * @return This builder.
      */
    public mayton.probeavro.emp.DebtEmp.Builder clearEMPS() {
      EMPS = null;
      EMPSBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DebtEmp build() {
      try {
        DebtEmp record = new DebtEmp();
        record.DEBTNO = fieldSetFlags()[0] ? this.DEBTNO : (java.lang.Integer) defaultValue(fields()[0]);
        record.DEBTNAME = fieldSetFlags()[1] ? this.DEBTNAME : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.LOC = fieldSetFlags()[2] ? this.LOC : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (EMPSBuilder != null) {
          try {
            record.EMPS = this.EMPSBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EMPS"));
            throw e;
          }
        } else {
          record.EMPS = fieldSetFlags()[3] ? this.EMPS : (mayton.probeavro.emp.EMPSRecord) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DebtEmp>
    WRITER$ = (org.apache.avro.io.DatumWriter<DebtEmp>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DebtEmp>
    READER$ = (org.apache.avro.io.DatumReader<DebtEmp>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.DEBTNO);

    out.writeString(this.DEBTNAME);

    out.writeString(this.LOC);

    this.EMPS.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.DEBTNO = in.readInt();

      this.DEBTNAME = in.readString(this.DEBTNAME instanceof Utf8 ? (Utf8)this.DEBTNAME : null);

      this.LOC = in.readString(this.LOC instanceof Utf8 ? (Utf8)this.LOC : null);

      if (this.EMPS == null) {
        this.EMPS = new mayton.probeavro.emp.EMPSRecord();
      }
      this.EMPS.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.DEBTNO = in.readInt();
          break;

        case 1:
          this.DEBTNAME = in.readString(this.DEBTNAME instanceof Utf8 ? (Utf8)this.DEBTNAME : null);
          break;

        case 2:
          this.LOC = in.readString(this.LOC instanceof Utf8 ? (Utf8)this.LOC : null);
          break;

        case 3:
          if (this.EMPS == null) {
            this.EMPS = new mayton.probeavro.emp.EMPSRecord();
          }
          this.EMPS.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










